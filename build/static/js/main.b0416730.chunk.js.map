{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["url","App","useState","formData","setFormData","listData","setListData","useEffect","Axios","get","then","res","data","catch","err","console","log","requestPut","put","className","onKeyUp","e","keyCode","post","content","state","type","placeholder","value","onChange","target","map","val","i","key","checked","is_active","name","id","style","width","marginLeft","paddingLeft","display","flexDirection","justifyContent","data-target","onClick","contentElement","document","getElementById","getAttribute","contentEditable","addEventListener","textContent","handleEdit","icon","faPen","_id","index","delete","b","slice","a","length","concat","faTrash","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b0416730.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\n\nimport Axios from 'axios';\nimport { faPen, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n// import { TextField } from '@material-ui/core';\n\nconst url = 'https://novm.herokuapp.com';\n\nfunction App() {\n  const [formData, setFormData] = useState('');\n  const [listData, setListData] = useState([]);\n\n  useEffect(() => {\n    Axios.get(`${url}/todos`)\n      .then((res) => {\n        setListData(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  const requestPost = () => {\n    Axios.post(`${url}/todo`, { content: formData })\n      .then((res) => {\n        console.log('Save...');\n        setFormData('');\n        setListData((state) => {\n          return [...state, res.data];\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const requestPut = (data) => {\n    Axios.put(`${url}/todo`, data)\n      .then((res) => {\n        console.log('Update...');\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const requestDelete = (id, index) => {\n    Axios.delete(`${url}/todo`, { data: { id } })\n      .then((res) => {\n        setListData((state) => {\n          const b = state.slice(0, index);\n          const a = state.slice(index + 1, state.length);\n          state = b.concat(a);\n          return [...state];\n        });\n        console.log('Delete...');\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleEdit = ({ target }, val) => {\n    const contentElement = document.getElementById(\n      target.getAttribute('data-target')\n    );\n    contentElement.contentEditable = true;\n    contentElement.addEventListener('keyup', (e) => {\n      if (e.keyCode === 13) {\n        contentElement.contentEditable = false;\n        console.log(contentElement.textContent);\n        val.content = contentElement.textContent;\n        requestPut(val);\n      }\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"card\">\n          <div className=\"card-header\">My Todo</div>\n          <div\n            onKeyUp={(e) => {\n              if (e.keyCode === 13) requestPost();\n            }}\n            className=\"card-body\"\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Input task name then tap Enter to add\"\n              value={formData}\n              onChange={(e) => {\n                setFormData(e.target.value);\n              }}\n            />\n          </div>\n          <div className=\"card-footer\">\n            <div className=\"list\">\n              {listData.map((val, i) => (\n                <div key={i} className=\"list-item\">\n                  <input\n                    type=\"checkbox\"\n                    onChange={({ target: { checked } }) => {\n                      val.is_active = checked;\n                      setListData((state) => {\n                        return [...state];\n                      });\n                      requestPut(val);\n                    }}\n                    checked={val.is_active}\n                    name=\"is_active\"\n                    id=\"is_active\"\n                  />\n                  <div\n                    id={`content-${i}`}\n                    style={{\n                      width: '100%',\n                      marginLeft: '6px',\n                      paddingLeft: '5px',\n                      display: 'flex',\n                      flexDirection: 'row',\n                    }}\n                  >\n                    {val.content}\n                  </div>\n                  <div\n                    style={{\n                      display: 'flex',\n                      flexDirection: 'row',\n                      justifyContent: 'right',\n                    }}\n                  >\n                    <button\n                      className=\"btn fab\"\n                      data-target={`content-${i}`}\n                      onClick={(e) => handleEdit(e, val)}\n                    >\n                      <FontAwesomeIcon icon={faPen} />\n                    </button>\n                    <button\n                      className=\"btn fab\"\n                      onClick={() => requestDelete(val._id, i)}\n                    >\n                      <FontAwesomeIcon icon={faTrash} />\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}